buildscript {
  dependencies {
    classpath files('buildlibs/deploy.jar')
  }
}

plugins {
  id "com.moowork.gulp" version "1.1.1"
  id 'org.dm.bundle' version "0.9.0"
}

apply plugin: 'java'
apply plugin: 'org.dm.bundle'
apply plugin: 'com.moowork.gulp'

repositories {
  mavenLocal()
  maven {url "http://cdn.repository.liferay.com/nexus/content/groups/public" }
}

dependencies {
  compileOnly group: "com.liferay.portal",  name: "com.liferay.portal.kernel",     version: "2.0.0"
  compileOnly group: "javax.servlet",       name: "servlet-api",                   version: "2.5"
  compileOnly group: "javax.portlet",       name: "portlet-api",                   version: "2.0"
  compileOnly group: "biz.aQute.bnd",       name: "biz.aQute.bndlib",              version: "3.1.0"
  compileOnly group: "org.osgi",            name: "org.osgi.compendium",           version: "5.0.0"
}

// load some properties from the main config file
import groovy.json.JsonSlurper
def propsSlurper = new JsonSlurper()
def propsJson = propsSlurper.parse file('.yo-rc.json')
def portletName = propsJson['generator-jetray'].portletName
def portletTitle = propsJson['generator-jetray'].portletTitle
def portletCategory = propsJson['generator-jetray'].portletCategory
def downloadNode = propsJson['generator-jetray'].downloadNode

//potentially read a property as to whether ui buid is production or development
def ui_builder_task = gulp_build
def uimode = findProperty('uimode')
if (uimode && uimode.toString().toLowerCase() == 'prod') {
  ui_builder_task = gulp_prod
}

// set the directories for node/npm/gulp tasks
node {
  download = downloadNode
  version = '6.10.0'
  workDir = file("nodejs")
  nodeModulesDir = file("src/main/ui")
}
gulp {
  workDir = file("src/main/ui")
}

// override the built-in processResources
// pull in the resources (JS, CSS, HTML, JSP etc.) that compose the app
// run the UI build on-demand if needed
processResources {
  mustRunAfter ui_builder_task
  actions = []
	doLast {
    // ensure gulp build has run at least once
	  if (!file('build/ui_build').exists()) {
		  ui_builder_task.execute()
	  }
 	  copyResources.execute();
	}
}

task copyResources(type: Copy) {
  def filterProps = [portletName : portletName, portletPath : "/${portletName}" ]
  into ('build/resources/main')
	into('') { 
	  from 'src/main/resources'
	} 
	into('META-INF/resources') { 
	  from 'build/ui_build'
	}
    filesNotMatching(['**/*.png','**/*.jpg','**/*.jpeg']) {
        filter {line ->
            def processed = line;
            filterProps.each {k,v ->
                processed = processed.replace("@@"+k,v);
            }
            return processed;
        }
    }
}

// whenever the JAR task runs we want it to always generate an up-to-date JAR
processResources.outputs.upToDateWhen { false }
jar.outputs.upToDateWhen { false }

// create the OSGi bundle (JAR)
bundle {
  instructions << [
		'Bundle-Version'      : '1.0.0',
    'Bundle-Name'         : portletTitle,
		'Bundle-SymbolicName' : portletName,
		'Bundle-Description'  : portletTitle,
		'-metatype'           : '*',
		'-buildpath'          : 'osgi.annotation; version=6.0.1,osgi.core; version=6.0,osgi.cmpn; version=6.0',
		'Import-Package'      : 'javax.servlet.http,javax.servlet,*',
		'Provide-Capability'  : 'osgi.service;objectClass:List<String>="javax.portlet.Portlet',
		'Web-ContextPath'     : "/${portletName}",
		'Require-Capability'  :  'osgi.extender;filter:="(&(osgi.extender=jsp.taglib' +
														 ')(uri=http://java.sun.com/portlet_2_0))",osgi.extender;filter:="(&(os' +
														 'gi.extender=jsp.taglib)(uri=http://liferay.com/tld/aui))",osgi.extend' +
														 'er;filter:="(&(osgi.extender=jsp.taglib)(uri=http://liferay.com/tld/p' +
														 'ortlet))",osgi.extender;filter:="(&(osgi.extender=jsp.taglib)(uri=htt' +
														 'p://liferay.com/tld/ui))",osgi.ee;filter:="(&(osgi.ee=JavaSE)(version' +
														 '=1.8))"'
  ]
}

build.dependsOn(ui_builder_task)
clean.dependsOn(gulp_clean)

task deploy doFirst {
    new Deployer().deploy(jar.archivePath)
}
